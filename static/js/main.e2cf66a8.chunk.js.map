{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","isLight","sortField","SORT_FIELD","App","useState","setSortField","isReversed","setReversed","isReset","setReset","visibleGoods","goods","preparedGoods","sort","good1","good2","NAME","localeCompare","LEN","length","reverse","getPreparedGoods","className","onClick","type","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCF,SAASC,EAAQC,EAAkBC,GACjC,OAAID,IAAcC,EACT,GAGF,Y,SAlCJJ,K,sBAAAA,E,cAAAA,M,KAqCE,IAAMK,EAAe,WAC1B,MAAkCC,mBAAS,IAA3C,mBAAOH,EAAP,KAAkBI,EAAlB,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAmBC,EAAnB,KACA,EAA4BH,oBAAS,GAArC,mBAAOI,EAAP,KAAgBC,EAAhB,KACMC,EApCR,SAA0BC,EACxBV,EAAmBK,GACnB,IAAMM,EAAa,YAAOD,GAe1B,OAbIV,GACFW,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQd,GACN,KAAKH,EAASkB,KACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKjB,EAASoB,IACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXb,EACKM,EAAcQ,UAGhBR,EAecS,CAAiBtB,EACpCE,EAAWK,GAEb,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,WACPlB,EAAaP,EAASkB,MACtBP,GAAS,IAEXe,KAAK,SACLF,UAAS,yBAAoBtB,EAAQC,EAAWH,EAASkB,OAN3D,iCAWA,wBACEO,QAAS,WACPlB,EAAaP,EAASoB,KACtBT,GAAS,IAEXe,KAAK,SACLF,UAAS,yBAAoBtB,EAAQC,EAAWH,EAASoB,MAN3D,4BAWA,wBACEK,QAAS,WACPhB,GAAaD,GACbD,EAAaJ,GACbQ,GAAUH,GAA4B,KAAdL,IAE1BuB,KAAK,SACLF,UAAS,yBAAoBhB,EAAa,GAAK,YAPjD,qBAaEE,EACE,wBACEe,QAAS,WACPlB,EAAa,IACbI,GAAS,GACTF,GAAY,IAEdiB,KAAK,SACLF,UAAU,4BAPZ,mBAWE,MAKR,6BAEIZ,EAAae,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCpHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e2cf66a8.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NAME = 'alphabetically',\n  LEN = 'length',\n}\n\nfunction getPreparedGoods(goods:string[],\n  sortField: string, isReversed: boolean):string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.NAME:\n          return good1.localeCompare(good2);\n        case SortType.LEN:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nfunction isLight(sortField:string, SORT_FIELD:string):string {\n  if (sortField === SORT_FIELD) {\n    return '';\n  }\n\n  return 'is-light';\n}\n\nexport const App:React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setReversed] = useState(false);\n  const [isReset, setReset] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    sortField, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => {\n            setSortField(SortType.NAME);\n            setReset(true);\n          }}\n          type=\"button\"\n          className={`button is-info ${isLight(sortField, SortType.NAME)}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => {\n            setSortField(SortType.LEN);\n            setReset(true);\n          }}\n          type=\"button\"\n          className={`button is-info ${isLight(sortField, SortType.LEN)}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            setReversed(!isReversed);\n            setSortField(sortField);\n            setReset(!isReversed || sortField !== '');\n          }}\n          type=\"button\"\n          className={`button is-info ${isReversed ? '' : 'is-light'}`}\n        >\n          Reverse\n        </button>\n\n        {\n          isReset ? (\n            <button\n              onClick={() => {\n                setSortField('');\n                setReset(false);\n                setReversed(false);\n              }}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          ) : ''\n        }\n\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}