{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","isLight","sortField","SORT_FIELD","App","useState","setSortField","isReversed","setReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","NAME","localeCompare","LEN","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCF,SAASC,EAAQC,EAAkBC,GACjC,OAAID,IAAcC,EACT,GAGF,Y,SAlCJJ,K,sBAAAA,E,cAAAA,M,KAqCE,IAAMK,EAAe,WAC1B,MAAkCC,mBAAS,IAA3C,mBAAOH,EAAP,KAAkBI,EAAlB,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAmBC,EAAnB,KACMC,EAnCR,SAA0BC,EACxBR,EAAmBK,GACnB,IAAMI,EAAa,YAAOD,GAe1B,OAbIR,GACFS,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQZ,GACN,KAAKH,EAASgB,KACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKf,EAASkB,IACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,EACKI,EAAcQ,UAGhBR,EAccS,CAAiBpB,EACpCE,EAAWK,GAEb,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,WACPhB,EAAaP,EAASgB,OAExBQ,KAAK,SACLF,UAAWG,IAAG,iBAAkBvB,EAAQC,EAAWH,EAASgB,OAL9D,iCAUA,wBACEO,QAAS,WACPhB,EAAaP,EAASkB,MAExBM,KAAK,SACLF,UAAWG,IAAG,iBAAkBvB,EAAQC,EAAWH,EAASkB,MAL9D,4BAUA,wBACEK,QAAS,WACPd,GAAaD,GACbD,EAAaJ,IAEfqB,KAAK,SACLF,UAAWG,IAAG,iBAAkBjB,EAAa,GAAK,YANpD,sBAYGA,GAA4B,KAAdL,IACb,wBACEoB,QAAS,WACPhB,EAAa,IACbE,GAAY,IAEde,KAAK,SACLF,UAAU,4BANZ,sBAeN,6BAEIZ,EAAagB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YChHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.501ec054.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NAME = 'alphabetically',\n  LEN = 'length',\n}\n\nfunction getPreparedGoods(goods:string[],\n  sortField: string, isReversed: boolean):string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.NAME:\n          return good1.localeCompare(good2);\n        case SortType.LEN:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nfunction isLight(sortField:string, SORT_FIELD:string):string {\n  if (sortField === SORT_FIELD) {\n    return '';\n  }\n\n  return 'is-light';\n}\n\nexport const App:React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    sortField, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => {\n            setSortField(SortType.NAME);\n          }}\n          type=\"button\"\n          className={cn('button is-info', isLight(sortField, SortType.NAME))}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => {\n            setSortField(SortType.LEN);\n          }}\n          type=\"button\"\n          className={cn('button is-info', isLight(sortField, SortType.LEN))}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            setReversed(!isReversed);\n            setSortField(sortField);\n          }}\n          type=\"button\"\n          className={cn('button is-info', isReversed ? '' : 'is-light')}\n        >\n          Reverse\n        </button>\n\n        {\n          (isReversed || sortField !== '') && (\n            <button\n              onClick={() => {\n                setSortField('');\n                setReversed(false);\n              }}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )\n        }\n\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}